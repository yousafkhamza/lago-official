version: 0.2

env:
  parameter-store:
    DOCKER_USER: "DOCKERHUB_USERNAME"
    DOCKER_PASS: "DOCKERHUB_PASS"

phases:
  pre_build:
    commands:
      - echo "list all files"
      - ls -latrh
      - echo "current docker version"
      - docker --version
      - echo "docker-compose current version"
      - docker-compose --version
      - echo "docker compose update"
      - mkdir docinstall
      - cd docinstall
      - wget -nv https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)
      - sudo mv docker-compose-$(uname -s)-$(uname -m) /usr/local/bin/docker-compose
      - sudo chmod -v +x /usr/local/bin/docker-compose
      - cd ..
      - rm -rf docinstall
      - docker-compose --version
      - echo "python version"
      - python --version
      - echo "docker env update"
      - echo "$DOCKER_ENV_PERMISSION_SERVICE" 
      - echo "$DOCKER_ENV_PERMISSION_SERVICE" >> .env
      - echo "docker login"
      - docker login -u $DOCKER_USER -p $DOCKER_PASS
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  build:
    commands:
      - echo Build started on `date`
      - echo Building and pushing Docker images defined in Docker Compose...

      # Replace with the path to your Docker Compose file
      - docker-compose -f ./docker-compose.yml build

      # Authenticate Docker to your ECR registry
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - IMAGE_REPO_URL=836907204716.dkr.ecr.us-east-1.amazonaws.com/lagostaging
      - REPOSITORY_NAME=lagostaging
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-9)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - docker image ls

      # Push each image to ECR with appropriate tags
      - |
        services=("db" "redis" "api" "front" "api-worker" "api-clock")

        for service in "${services[@]}"; do
          docker tag ${service}:latest $IMAGE_REPO_URL/${service}:latest
          docker push $IMAGE_REPO_URL/${service}:latest
        done
  post_build:
    commands:
      - echo Build completed on `date`

artifacts:
  files: imagedefinitions.json
